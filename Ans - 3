public class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();

        // Create a 2D array to store the minimum number of steps
        int[][] dp = new int[m + 1][n + 1];

        // Initialize the first row and first column of the dp array
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j;
        }

        // Fill the dp array
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;
                }
            }
        }

        return dp[m][n];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String word1 = "sea";
        String word2 = "eat";
        int minSteps = solution.minDistance(word1, word2);
        System.out.println("Minimum number of steps required: " + minSteps);The minDistance function takes two strings word1 and word2 as input and returns the minimum number of steps required to make the two strings the same.

The algorithm uses dynamic programming to fill the 2D dp array. The value dp[i][j] represents the minimum number of steps required to make the substrings word1[0...i-1] and word2[0...j-1] the same. It iteratively compares characters from word1 and word2 and computes the minimum steps based on whether the characters match or need to be deleted.

Finally, in the main method, we create an instance of the Solution class, initialize the input strings, and call the minDistance method to obtain the result. The result is then printed to the console.
    }
}


