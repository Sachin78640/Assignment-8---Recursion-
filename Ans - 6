import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<>();
        int[] pCount = new int[26];  // Frequency count of characters in p
        int[] sCount = new int[26];  // Frequency count of characters in s (sliding window)

        // Calculate the frequency count of characters in p
        for (char c : p.toCharArray()) {
            pCount[c - 'a']++;
        }

        int n = s.length();
        int m = p.length();

        // Initialize the sliding window
        for (int i = 0; i < m; i++) {
            sCount[s.charAt(i) - 'a']++;
        }

        // Check if the first window is an anagram
        if (Arrays.equals(pCount, sCount)) {
            result.add(0);
        }

        // Slide the window and check for anagrams
        for (int i = m; i < n; i++) {
            sCount[s.charAt(i) - 'a']++;       // Include the new character
            sCount[s.charAt(i - m) - 'a']--;   // Exclude the leftmost character

            // Check if the current window is an anagram
            if (Arrays.equals(pCount, sCount)) {
                result.add(i - m + 1);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String s = "cbaebabacd";
        String p = "abc";
        List<Integer> indices = solution.findAnagrams(s, p);
        System.out.println("Start indices of anagrams: " + indices);
    }
}

he findAnagrams function takes two strings s and p as input and returns a list of start indices in s where anagrams of p are found.

The algorithm uses a sliding window approach to find anagrams. It first calculates the frequency count of characters in p and initializes the sliding window in s by counting the characters in the first m characters, where m is the length of p.

Then, it checks if the first window is an anagram by comparing the frequency counts of characters in p and the sliding window. If they are equal, the start index (0) is added to the result list.

Next, it slides the window by moving the right end one step to the right and the left end one step to the right. It updates the frequency counts accordingly and checks if the current window is an anagram. If it is, the start index is added to the result list.

Finally, the function returns the result list.

In the main method, we create an instance of the Solution class, initialize the input strings, and call the findAnagrams method to obtain the start indices of anagrams. The result list is then printed to the console.
